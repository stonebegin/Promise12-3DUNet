# path to the checkpoint file containing the model
model_path: 3dunet/best_checkpoint.pytorch
# model configuration
model:
  # model class
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (crg - Conv3d+ReLU+GroupNorm)
  layer_order: crg
  # feature maps scale factor
  f_maps: 32
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
# predictor configuration
predictor:
  # standard in memory predictor
  name: 'StandardPredictor'
# specify the test datasets
datasets:
  # patch size given to the network (adapt to fit in your GPU mem)
  patch: [64, 128, 128]
  # stride between patches (make sure the the patches overlap in order to get smoother prediction maps)
  stride: [32, 100, 100]
  # use mirror padding
  mirror_padding: true
  # path to the raw data within the H5
  raw_internal_path: raw
  # how many subprocesses to use for data loading
  num_workers: 8
  # paths to the datasets
  test_path:
    - 'resources/random_label3D.h5'
  transformer:
    test:
      raw:
        - name: Normalize
        - name: ToTensor
          expand_dims: true